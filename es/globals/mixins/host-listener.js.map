{"version":3,"file":"host-listener.js","names":["on","EVENT_NAME_FORMAT","HostListenerMixin","Base","HostListenerMixinImpl","constructor","args","_defineProperty","Set","connectedCallback","hostListeners","_hostListeners","Object","keys","forEach","listenerName","type","_unprefixedType","tokens","exec","Error","targetName","unprefixedType","target","document","ownerDocument","window","defaultView","parentRoot","getRootNode","shadowRoot","options","_handles","add","disconnectedCallback","handle","release","delete"],"sources":["globals/mixins/host-listener.ts"],"sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport on from './on';\nimport Handle from '../internal/handle';\n\n/**\n * The format for the event name used by `@HostListener` decorator.\n */\nconst EVENT_NAME_FORMAT =\n  /^((document|window|parentRoot|shadowRoot):)?([\\w-]+)$/;\n\n/**\n * @param Base The base class.\n * @returns A mix-in that sets up and cleans up event listeners defined by `@HostListener` decorator.\n */\nconst HostListenerMixin = <T extends Constructor<HTMLElement>>(Base: T) => {\n  /**\n   * A mix-in class that sets up and cleans up event listeners defined by `@HostListener` decorator.\n   */\n  class HostListenerMixinImpl extends Base {\n    /**\n     * The list of handles managed by this mix-in.\n     *\n     * @private\n     */\n    _handles: Set<Handle> = new Set(); // Not using TypeScript `private` due to: microsoft/TypeScript#17744\n\n    connectedCallback() {\n      // @ts-ignore: Until `connectedCallback` is added to `HTMLElement` definition\n      super.connectedCallback();\n      const hostListeners = (this.constructor as typeof HostListenerMixinImpl)\n        ._hostListeners;\n      Object.keys(hostListeners).forEach((listenerName) => {\n        Object.keys(hostListeners[listenerName]).forEach((type) => {\n          // Parses `document:click`/`window:click` format\n          const tokens = EVENT_NAME_FORMAT.exec(type);\n          if (!tokens) {\n            throw new Error(`Could not parse the event name: ${listenerName}`);\n          }\n          const [, , targetName, unprefixedType] = tokens;\n          const target: EventTarget =\n            {\n              document: this.ownerDocument,\n              window: this.ownerDocument!.defaultView,\n              parentRoot: this.getRootNode(),\n              shadowRoot: this.shadowRoot,\n            }[targetName] || this;\n\n          const { options } = hostListeners[listenerName][type];\n\n          this._handles.add(\n            on(\n              target,\n              ((this.constructor as typeof Base)[unprefixedType] ??\n                unprefixedType) as keyof HTMLElementEventMap,\n              this[listenerName],\n              options\n            )\n          );\n        });\n      });\n    }\n\n    disconnectedCallback() {\n      this._handles.forEach((handle) => {\n        handle.release();\n        this._handles.delete(handle);\n      });\n      // @ts-ignore: Until `disconnectedCallback` is added to `HTMLElement` definition\n      super.disconnectedCallback();\n    }\n\n    /**\n     * The map, keyed by method name, of event listeners that should be attached to host element or host document.\n     *\n     * @private\n     */\n    static _hostListeners: {\n      [listenerName: string]: {\n        [type: string]: {\n          options?: boolean | AddEventListenerOptions;\n        };\n      };\n    } = {}; // Not using TypeScript `private` due to: microsoft/TypeScript#17744\n  }\n\n  return HostListenerMixinImpl;\n};\n\nexport default HostListenerMixin;\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,EAAE,MAAM,MAAM;AAGrB;AACA;AACA;AACA,MAAMC,iBAAiB,GACrB,uDAAuD;;AAEzD;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,GAAwCC,IAAO,IAAK;EACzE;AACF;AACA;EACE,MAAMC,qBAAqB,SAASD,IAAI,CAAC;IAAAE,YAAA,GAAAC,IAAA;MAAA,SAAAA,IAAA;MACvC;AACJ;AACA;AACA;AACA;MAJIC,eAAA,mBAKwB,IAAIC,GAAG,CAAC,CAAC;IAAA;IAAE;;IAEnCC,iBAAiBA,CAAA,EAAG;MAClB;MACA,KAAK,CAACA,iBAAiB,CAAC,CAAC;MACzB,MAAMC,aAAa,GAAI,IAAI,CAACL,WAAW,CACpCM,cAAc;MACjBC,MAAM,CAACC,IAAI,CAACH,aAAa,CAAC,CAACI,OAAO,CAAEC,YAAY,IAAK;QACnDH,MAAM,CAACC,IAAI,CAACH,aAAa,CAACK,YAAY,CAAC,CAAC,CAACD,OAAO,CAAEE,IAAI,IAAK;UAAA,IAAAC,eAAA;UACzD;UACA,MAAMC,MAAM,GAAGjB,iBAAiB,CAACkB,IAAI,CAACH,IAAI,CAAC;UAC3C,IAAI,CAACE,MAAM,EAAE;YACX,MAAM,IAAIE,KAAK,CAAE,mCAAkCL,YAAa,EAAC,CAAC;UACpE;UACA,MAAM,IAAKM,UAAU,EAAEC,cAAc,CAAC,GAAGJ,MAAM;UAC/C,MAAMK,MAAmB,GACvB;YACEC,QAAQ,EAAE,IAAI,CAACC,aAAa;YAC5BC,MAAM,EAAE,IAAI,CAACD,aAAa,CAAEE,WAAW;YACvCC,UAAU,EAAE,IAAI,CAACC,WAAW,CAAC,CAAC;YAC9BC,UAAU,EAAE,IAAI,CAACA;UACnB,CAAC,CAACT,UAAU,CAAC,IAAI,IAAI;UAEvB,MAAM;YAAEU;UAAQ,CAAC,GAAGrB,aAAa,CAACK,YAAY,CAAC,CAACC,IAAI,CAAC;UAErD,IAAI,CAACgB,QAAQ,CAACC,GAAG,CACfjC,EAAE,CACAuB,MAAM,GAAAN,eAAA,GACJ,IAAI,CAACZ,WAAW,CAAiBiB,cAAc,CAAC,cAAAL,eAAA,cAAAA,eAAA,GAChDK,cAAc,EAChB,IAAI,CAACP,YAAY,CAAC,EAClBgB,OACF,CACF,CAAC;QACH,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;IAEAG,oBAAoBA,CAAA,EAAG;MACrB,IAAI,CAACF,QAAQ,CAAClB,OAAO,CAAEqB,MAAM,IAAK;QAChCA,MAAM,CAACC,OAAO,CAAC,CAAC;QAChB,IAAI,CAACJ,QAAQ,CAACK,MAAM,CAACF,MAAM,CAAC;MAC9B,CAAC,CAAC;MACF;MACA,KAAK,CAACD,oBAAoB,CAAC,CAAC;IAC9B;;IAEA;AACJ;AACA;AACA;AACA;;IAOY;EACV;EAAC3B,eAAA,CAjEKH,qBAAqB,oBAgErB,CAAC,CAAC;EAGR,OAAOA,qBAAqB;AAC9B,CAAC;AAED,eAAeF,iBAAiB"}