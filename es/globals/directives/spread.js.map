{"version":3,"file":"spread.js","names":["Directive","directive","attributesMapCache","WeakMap","SpreadDirective","update","part","attributesInfo","element","oldAttributesInfo","get","Object","keys","forEach","name","removeAttribute","value","is","setAttribute","set","render","spread"],"sources":["globals/directives/spread.ts"],"sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {\n  AttributePart,\n  Directive,\n  DirectiveParameters,\n} from 'lit/directive.js';\nimport { directive } from 'lit/async-directive.js';\n\nexport interface AttributesInfo {\n  readonly [name: string]: string;\n}\n\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst attributesMapCache = new WeakMap();\n\n/**\n * A directive that applies attributes from a key-value pairs.\n * This must be used in the `...` name and must be the only part used in the attribute.\n * It applies the key-value pairs in the `attributesInfo` argument\n * and sets them as attribute name/value pairs.\n *\n */\nclass SpreadDirective extends Directive {\n  /**\n   * The update function that handles the attribute setting.\n   *\n   * @param part an object with an API to manage the element's DOM\n   * @returns the render function\n   */\n  update(part: AttributePart, [attributesInfo]: DirectiveParameters<this>) {\n    const { element } = part;\n\n    // Removes old attributes that are no longer there\n    const oldAttributesInfo = attributesMapCache.get(part);\n    if (oldAttributesInfo) {\n      Object.keys(oldAttributesInfo).forEach((name) => {\n        if (!(name in attributesInfo)) {\n          element.removeAttribute(name);\n        }\n      });\n    }\n\n    // Adds new attributes\n    Object.keys(attributesInfo).forEach((name) => {\n      const value = attributesInfo[name];\n      if (\n        (!oldAttributesInfo || !Object.is(value, oldAttributesInfo[name])) &&\n        typeof value !== 'undefined'\n      ) {\n        element.setAttribute(name, value);\n      }\n    });\n\n    // Updates the cache\n    attributesMapCache.set(part, attributesInfo);\n\n    return this.render(attributesInfo);\n  }\n\n  /**\n   * The rendering function that simply takes in the arguments to be used\n   * in the update() function.\n   *\n   * @param attributesInfo The key-value pair to be set as the attribute name/value pairs.\n   * @returns the attributes info\n   */\n  render(attributesInfo: AttributesInfo) {\n    return attributesInfo;\n  }\n}\n\nconst spread = directive(SpreadDirective);\n\nexport default spread;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAEEA,SAAS,QAEJ,kBAAkB;AACzB,SAASC,SAAS,QAAQ,wBAAwB;AAMlD;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG,IAAIC,OAAO,CAAC,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,eAAe,SAASJ,SAAS,CAAC;EACtC;AACF;AACA;AACA;AACA;AACA;EACEK,MAAMA,CAACC,IAAmB,EAAE,CAACC,cAAc,CAA4B,EAAE;IACvE,MAAM;MAAEC;IAAQ,CAAC,GAAGF,IAAI;;IAExB;IACA,MAAMG,iBAAiB,GAAGP,kBAAkB,CAACQ,GAAG,CAACJ,IAAI,CAAC;IACtD,IAAIG,iBAAiB,EAAE;MACrBE,MAAM,CAACC,IAAI,CAACH,iBAAiB,CAAC,CAACI,OAAO,CAAEC,IAAI,IAAK;QAC/C,IAAI,EAAEA,IAAI,IAAIP,cAAc,CAAC,EAAE;UAC7BC,OAAO,CAACO,eAAe,CAACD,IAAI,CAAC;QAC/B;MACF,CAAC,CAAC;IACJ;;IAEA;IACAH,MAAM,CAACC,IAAI,CAACL,cAAc,CAAC,CAACM,OAAO,CAAEC,IAAI,IAAK;MAC5C,MAAME,KAAK,GAAGT,cAAc,CAACO,IAAI,CAAC;MAClC,IACE,CAAC,CAACL,iBAAiB,IAAI,CAACE,MAAM,CAACM,EAAE,CAACD,KAAK,EAAEP,iBAAiB,CAACK,IAAI,CAAC,CAAC,KACjE,OAAOE,KAAK,KAAK,WAAW,EAC5B;QACAR,OAAO,CAACU,YAAY,CAACJ,IAAI,EAAEE,KAAK,CAAC;MACnC;IACF,CAAC,CAAC;;IAEF;IACAd,kBAAkB,CAACiB,GAAG,CAACb,IAAI,EAAEC,cAAc,CAAC;IAE5C,OAAO,IAAI,CAACa,MAAM,CAACb,cAAc,CAAC;EACpC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEa,MAAMA,CAACb,cAA8B,EAAE;IACrC,OAAOA,cAAc;EACvB;AACF;AAEA,MAAMc,MAAM,GAAGpB,SAAS,CAACG,eAAe,CAAC;AAEzC,eAAeiB,MAAM"}