{"version":3,"file":"skeleton-text.js","names":["classMap","LitElement","html","property","prefix","SKELETON_TEXT_TYPE","styles","carbonElement","customElement","getRandomInt","min","max","n","randoms","Math","floor","CDSSkeletonText","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","reflect","key","value","REGULAR","type","Boolean","Number","render","paragraph","lineCount","width","classes","HEADING","widthNum","parseInt","widthPx","includes","widthPercent","lines","Array","apply","_t","_2","map","_","i","randomWidth","style","_t2","_t3","static"],"sources":["components/skeleton-text/skeleton-text.ts"],"sourcesContent":["/**\n * @license\n *\n * Copyright IBM Corp. 2019, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { classMap } from 'lit/directives/class-map.js';\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { prefix } from '../../globals/settings';\nimport { SKELETON_TEXT_TYPE } from './defs';\nimport styles from './skeleton-text.scss';\nimport { carbonElement as customElement } from '../../globals/decorators/carbon-element';\n\nexport { SKELETON_TEXT_TYPE };\n\nfunction getRandomInt(min: number, max: number, n: number) {\n  const randoms = [0.973051493507435, 0.15334737213558558, 0.5671034553053769];\n  return Math.floor(randoms[n % 3] * (max - min + 1)) + min;\n}\n\n/**\n * Skeleton text.\n *\n * @element cds-skeleton-text\n */\n@customElement(`${prefix}-skeleton-text`)\nclass CDSSkeletonText extends LitElement {\n  /**\n   * The type of skeleton text.\n   */\n  @property({ reflect: true })\n  type = SKELETON_TEXT_TYPE.REGULAR;\n\n  /**\n   * width (in px or %) of single line of text or max-width of paragraph lines\n   */\n  @property({ reflect: true })\n  width = '100%';\n\n  /**\n   * will generate multiple lines of text\n   */\n  @property({ type: Boolean, reflect: true })\n  paragraph = false;\n\n  /**\n   * the number of lines in a paragraph\n   */\n  @property({ type: Number, reflect: true })\n  lineCount = 3;\n\n  render() {\n    const { paragraph, lineCount, type, width } = this;\n    const classes = classMap({\n      [`${prefix}--skeleton__text`]: true,\n      [`${prefix}--skeleton__heading`]: type === SKELETON_TEXT_TYPE.HEADING,\n    });\n    if (paragraph) {\n      const widthNum = parseInt(this.width, 10);\n      const widthPx = this.width.includes('px');\n      const widthPercent = this.width.includes('%');\n      const lines = Array.apply(Array(lineCount));\n      return html`${lines.map((_, i) => {\n        const randomWidth =\n          (widthPercent && `${getRandomInt(0, 75, i)}px`) ||\n          (widthPx && `${getRandomInt(0, widthNum, i)}px`);\n        const style =\n          (widthPercent && `width: calc(${width} - ${randomWidth})`) ||\n          (widthPx && `width: ${randomWidth}`) ||\n          '';\n        return html`<p class=\"${classes}\" style=\"${style}\"></p>`;\n      })}`;\n    }\n\n    return html`<p class=\"${classes}\" style=\"width:${width}\"></p>`;\n  }\n\n  static styles = styles;\n}\n\nexport default CDSSkeletonText;\n"],"mappings":"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"}